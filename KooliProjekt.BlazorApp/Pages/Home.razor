@page "/"
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<h1>Cars List</h1>

<p>This component demonstrates fetching car data from the API.</p>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="AddNewCar">Add New Car</button>
</div>

@if (errorMessage != null)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@if (cars == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Rate per Minute</th>
                <th>Rate per KM</th>
                <th>Available</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in cars)
            {
                <tr>
                    <td>@car.Id</td>
                    <td>@car.Title</td>
                    <td>@car.rental_rate_per_minute</td>
                    <td>@car.rental_rate_per_km</td>
                    <td>@(car.is_available ? "Yes" : "No")</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditCar(car.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCar(car.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<Car>? cars;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadCars();
    }

    private async Task LoadCars()
    {
        try
        {
            errorMessage = null;
            var result = await ApiClient.List();
            if (result.Success)
            {
                cars = result.Value;
            }
            else
            {
                errorMessage = $"Error loading data: {result.ErrorMessage}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private void AddNewCar()
    {
        NavigationManager.NavigateTo("/edit/0");
    }

    private void EditCar(int id)
    {
        NavigationManager.NavigateTo($"/edit/{id}");
    }

    private async Task DeleteCar(int id)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this car?"))
            return;

        var result = await ApiClient.Delete(id);
        if (result.Success)
        {
            await LoadCars();
        }
        else
        {
            errorMessage = $"Failed to delete car: {result.ErrorMessage}";
        }
    }
}